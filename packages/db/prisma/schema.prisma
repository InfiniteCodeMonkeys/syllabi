// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String            @id @default(cuid())
    firstName       String?
    lastName        String?
    clerkId         String?           @unique
    email           String?           @unique
    emailVerified   String?
    isAdmin         Boolean?          @default(false)
    lastSignInAt    String?
    profileImageURL String?
    username        String?
    birthday        String?
    interests       String[]
    SuggestedNodes  SuggestedNodes[]
    UsersSavedNodes UsersSavedNodes[]
}

model SuggestedNodes {
    id          String   @id @default(cuid())
    name        String
    description String?
    type        String   @default("fieldNode")
    parents     String[]
    children    Json
    details     Json
    User        User?    @relation(fields: [userId], references: [id])
    userId      String?
}

model Nodes {
    id              String            @id @default(cuid())
    data            Json
    type            String            @default("fieldNode")
    children        String[]
    parent          Json?
    details         Json?
    UsersSavedNodes UsersSavedNodes[]
}

model UsersSavedNodes {
    user       User     @relation(fields: [userId], references: [id])
    userId     String // relation scalar field (used in the `@relation` attribute above)
    nodes      Nodes    @relation(fields: [nodesId], references: [id])
    nodesId    String // relation scalar field (used in the `@relation` attribute above)
    assignedAt DateTime @default(now())
    assignedBy String
    Courses    Course?  @relation(fields: [coursesId], references: [id])
    coursesId  String?

    @@id([userId, nodesId])
}

model Edges {
    id     String @id @default(cuid())
    source String
    target String
}

model Course {
    id                 String            @id @default(cuid())
    name               String
    description        String
    type               String            @default("courseNode")
    parent             Json
    prerequisites      String[]
    resources          Json?
    learningObjectives String[]
    syllabus           Json?
    experts            String[]
    UsersSavedNodes    UsersSavedNodes[]
    Subject            Subject?          @relation(fields: [subjectId], references: [id])
    subjectId          String?
}

model Subject {
    id          String   @id @default(cuid())
    name        String
    description String?
    type        String   @default("fieldNode")
    parent      Json
    Courses     Course[]
}
